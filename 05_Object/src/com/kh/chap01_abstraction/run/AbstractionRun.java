package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class AbstractionRun {

	/*
	  1. 객체 지향 언어 : "객체"를 "지향"하는 언어로, "객체 중심"으로 돌아감.
	  2. 객체란 : 현실세계에 독립적으로 존재하는 모든 것들을 의미(유형, 무형, 개념 등..)
	  			현실세계에서는 객체들간의 상호작용으로 돌아감.(내가 물을 먹는다.)
	  3. 객체 지향 프로그래밍 : 현실세계의 객체들간의 상호작용
	  					  프로그래밍을 통해 가상세계로 구현하는 과정
	  					  ('내가' '쇼핑몰'에서 '로그인'을 한다.)
	  4. 구현하고자 하는 프로그램상 필요한 객체들을 생성하기 위해
	  		: 클래스라는 틀을 먼저 만들어야 함. 
	  		 (클래스 : 각 객체들의 속성을 담을 수 있는 그릇 -> 이름, 나이, 주소, 등.. )
	  		 --> 추상화 + 캡슐화를 접목해서 만들어야 함.
	  5. 추상화 과정.
	  	1) 구현하고자 하는 프로그램에서 필요한 객체들을 생각 -> 쇼핑몰의 고객
	  	2) 객체들이 가지는 공통적 속성, 기능들을 모두 추출 -> 고객 이름, 나이, 주소, 혈액형, mbti 등.. 
	  	3) 추출한 것을 가지고 구현하고자 했던 프로그램의 
	  	   "실질적 목적"에 맞춰 불필요한 속성, 기능 등.. 제거 -> 혈핵형, mbti 제거.
	  	4) 최종적으로 추려진 속성들을 어떤 자료형, 변수명으로 사용할 것인지 생각.
	  	
	  	ex) 학생 관리 프로그램
	  		1) 학생 관련 객체
	  		2) 공통적인 속성 및 기능. (이름, 나이, 키, 몸무게, 달리기속도, 머리색, 각과목점수 등..)
	  		3) 학생 인적사항을 관리하는 프로그램 : 이름, 나이, 주소, 번호 등.. 필요.
	  		   '성적'을 관리하는 프로그램 : 이름, 나이, 학년, 반, 각과목점수 등..
	  		   '건강'을 관리하는 프로그램 : 이름, 나이, 학년, 반, 키, 몸무게, 달리기 속도 등.. 
	  		   
	  		   결국 추려진 것은 "이름, 나이, 키" 라는 가정하에, 
	  		4) 추상화
	  		   이름 : String name;
	  		   나이 : int age;
	  		   키  : double height; 
	  6. 선정된 것들을 가지고 본격적인 프로그래밍 시작.
	  	1) "변수" 만을 가지고 프로그래밍을 한다면? 
	  		* 변수 - 하나의 자료형에 하나의 값만 보관.
	  		  달봉이라는 객체를 만들어내기 위해? -> String name1 = "달봉"; int age = 19; double height1 = 80.6
	  	  	  장원영라는 객체를 만들어내기 위해? -> String name2 = "장원영"; int age = 23; double height2 = 170.5
	  		  ... 등등.. 
	  		  !! 수백명에 해당하는 학생들을 만들 때, 수많은 변수가 만들어짐
	  		  
	  	2) "배열" 로만 프로그래밍을 한다면? 
	  		* 배열 - 하나의 자료형에 여러개의 값들을 보관.
	  		  학생들의 이름을 보관하는 String[] name = {"달봉", "장원영", 등..}
	  		  학생들의 나이를 보관하는	   int[] age = {19, 23, ...}
	  		  학생들의 키를 보관하는	double[] height = {80.6, 170.5, ...}
	  		  ... 등 등..
	  		  !! 데이터를 지우고, 추가 할 때 문제가 됨. 
	  		  	-> 배열 크기가 모자라면 배열을 다시 만들고, 복사도 해야함.
	  		
	  	3) 구조체! 
	  		* 구조체 - 여러개의 자료형의 여러개의 값들을 보관.
	  		  String, int, double 등.. 값도 같이 싹 한번에 보관할 수 있도록!
	  		  나만의 배열 같은 자료형을 만들 수 있음 : 클래스
	  		  
	  		  Stutent라는 클래스를 만듦.
	  		  -> 객체의 정보를 보관할 그릇같은 클래스.
	  		  -> model.vo 
	*/
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		// 클래스 만든 후, 학생 객체 만들어보기.
		// 자바에서 객체로 만들기 위해 만들기 위해 new라는 키워드를 통해 heap영역에 생성먼저.
		Student dal = new Student(); // 객체 생성 구문 
			// 주소값 담고 있음, 기본 자료형이 아니기 때문
			// 여기까지는 heap 영역에 할당된 공간의 JVM의 초기값들이 세팅되어 있음.
			// 직접 접근하여, 내가 원하는 값 대입.
			dal.name = "dalbong";
			dal.age = 19;
			dal.height = 80.3;
			System.out.println(dal); //주소값 출력
			System.out.println(dal.name); //직접 접근
			System.out.println(dal.age);
			System.out.println(dal.height);
			
			
			// 자신의 이름으로 학생 객체 만들기.
			// 값 대입
			// 김ㅇㅇ 님의 나이는 ㅇㅇ이고, 키는 ㅇㅇ 입니다.
			
		Student kim = new Student();
			kim.name = "kiseokkim";
			kim.age = 33;
			kim.height = 177.8;
			System.out.print(kim.name + "님의 나이는" + kim.age + "이고, 키는 " + kim.height + "입니다.");
		/*
		 필드를 public 접근 제한자로 작성.
		 	-> 필드에 직접 접근해서 값 대입하거나 값을 가져올 수 있음.
		 	-> 외부에서 함부로 값을 변질시키거나, 조회 권한이 없는 사람이 가져올 수 있는 문제 발생.
		 	>> 캡슐화 작업
		*/
			
			
	}

}
